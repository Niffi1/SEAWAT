      SUBROUTINE SWTDF(ISUMZ,IOUT,TUNIT,LUNIT,MUNIT)
C ****************************************************************
C THIS SUBROUTINE DETERMINES THE FRESHWATER DENSITY
C ****************************************************************
C last modified: 07-15-99
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER TUNIT*4,LUNIT*4,MUNIT*4
      COMMON /DENSITY/PF,CONVERSION

cwxg define the unitS of density based on length and mass
      if((LUNIT.eq.'FT'.or.Lunit.eq.'ft'.or.Lunit.eq.'fT'.or
     #	.lunit.eq.'Ft').and.(MUNIT.eq.'LB'.or.Munit.eq.'lb'.or.munit
     #	.eq.'lB'.or.munit.eq.'Lb')) then
			pf=62.44   !lbs/cf
			CONVERSION=0.025*PF/2.1833
           write(iout, *) '***** Density of Fresh Water is 62.44 lbs/cf'
              write(*, *) '***** Density of Fresh Water is 62.44 lbs/cf'
      elseif((LUNIT.eq.'m'.or.Lunit.eq.'M').and.(MUNIT.eq.'KG'.or.
     #	Munit.eq.'kg'.or.munit.eq.'Kg'.or.munit.eq.'kG')) then
			pf=1000.D0    !kg/m3
			CONVERSION=0.025D0*PF/35.D0
            write(iout, *) '***** Density of Fresh Water is 1000 kg/m3'
               write(*, *) '***** Density of Fresh Water is 1000 kg/m3'
               write(*,*)
      else
		write(*,*) 'Failed to define fresh water density'
		write(iout,*) 'Failed to define fresh water density'
		write(*,*) 'Please check your MT3D input. Stop'
		stop
      endif
	ISUMZ=1
C--NORMAL RETURN
      RETURN
      END


      SUBROUTINE SWTAL(IOUT,NCOL,NROW,NLAY,LZELEV,LZPS,LZDCDT,LZRHOCR,
     +	LZRHOCC,LZRHOCV,LZPSOLD,ISUMZ)
C **********************************************************************
C THIS SUBROUTINE ALLOCATES SPACE FOR SEAWAT ARRAYS.
C **********************************************************************
C LAST MODIFIED 7/15/99 LANGEVIN
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      NODES=NCOL*NROW*NLAY
C
C--REAL ARRAYS
      LZELEV=ISUMZ
      ISUMZ=ISUMZ+NODES
      LZPS=ISUMZ
      ISUMZ=ISUMZ+NODES
	LZDCDT=ISUMZ
	ISUMZ=ISUMZ+NODES
      LZRHOCR=ISUMZ
      ISUMZ=ISUMZ+NODES
      LZRHOCC=ISUMZ
      ISUMZ=ISUMZ+NODES
      LZRHOCV=ISUMZ
	ISUMZ=ISUMZ+NODES
	LZPSOLD=ISUMZ
	ISUMZ=ISUMZ+NODES
C
C
C--WRITE HOW MANY ELEMENTS OF THE Z ARE USED
      WRITE(IOUT,1090) ISUMZ
 1090 FORMAT(1X,I8,' ELEMENTS OF THE Z ARRAY USED BY SEAWAT'
     &/)

C--NORMAL RETURN
      RETURN
      END

	SUBROUTINE SWTELEV(NCOL,NROW,NLAY,HTOP,DZ,ELEV)
C **********************************************************************
C THIS SUBROUTINE CALCULATES THE ELEVATION ARRAY FOR SEAWAT
C 
C***********************************************************************
C CREATED 7/21/99
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION elev(ncol,nrow,nlay),HTOP(NCOL,NROW),
     +	DZ(NCOL,NROW,NLAY)

cwxg   Calculate cell center elevation
      do I=1, nrow
      do j=1, ncol
		elev(j,i,1)=htop(j,i)-.5*dz(j,i,1)
		do k=2,nlay
			elev(j,i,k)=elev(j,i,k-1)-0.5*(dz(j,i,k-1)+
     +			dz(j,i,k))
		enddo
      enddo
      enddo
	END

        FUNCTION CALCDENS(CONCENTRATION)
C************************************************************************
C   THIS FUNCTION CALCULATES FLUID DENSITY AS A FUNCTION OF CONCENTRATION
C************************************************************************
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /DENSITY/PF, CONVERSION
      CALCDENS=PF+CONVERSION*CONCENTRATION
C--SEAWAT: THE FOLLOWING TWO LINES IMPLEMENT EQUATION OF STATE FOR
C--SEAWAT: THE HYDROCOIN TEST PROBLEM
C	RC=1./280.*CONCENTRATION
C	CALCDENS=(RC/1200.+(1-RC)/1000.)**-1
      RETURN
      END

	SUBROUTINE SWTPS(NCOL,NROW,NLAY,NCOMP,CNEW,CINACT,PS,IOUT)
C **********************************************************************
C THIS SUBROUTINE CALCULATES THE PS ARRAY
C 
C***********************************************************************
C CREATED 7/21/99
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION ps(ncol,nrow,nlay),CNEW(NCOL,NROW,NLAY,NCOMP)
	COMMON /DENSITY/ PF,CONVERSION

	CONCMIN=0.

      do K=1, nlay
      do I=1, nrow
      do J=1, ncol
		ps(j,i,k)=CNEW(j,i,k,1)
		if (PS(j,i,k).eq.cinact) ps(j,i,k)=0.0
          ps(j,i,k)=CALCDENS(ps(j,i,k))
	    if (ps(j,i,k).lt.pf) then
			if (CNEW(j,i,k,1).LT.concmin) then
				concmin=CNEW(j,i,k,1)
				jmin=j
				imin=i
				kmin=k
			endif
C			CNEW(j,i,k,1)=0.
			ps(j,i,k)=pf
		end if
      enddo
      enddo
      enddo
	IF (CONCMIN.LT.0) WRITE(IOUT,100) CONCMIN,IMIN,JMIN,KMIN
  100	FORMAT(1H0,'WARNING: NUMERICAL DISPERSION ENCOUNTERED'/
     &        1X,'ONE OR MORE CELL CONCENTRATIONS LESS THAN ZERO'/
     &        1X,'LARGEST NEGATIVE CONCENTRATION = ',E10.3/
     &        1X,'AT CELL (I,J,K) = (',I4,',',I4,',',I4,')'/
     &        1X,'DENSITY SET TO DENSITY OF FRESHWATER'/)
	END

	SUBROUTINE SWTDCDT(NCOL,NROW,NLAY,NCOMP,COLD,CNEW,PRSITY,
     +	DELR,DELC,DH,DCDT,DTRANS,CINACT)
C **********************************************************************
C THIS SUBROUTINE CALCULATES THE DCDT ARRAY
C 
C***********************************************************************
C CREATED 7/21/99
C MODIFIED 7/31/2002 TO CALCULATE ONLY IF CONC NOT EQUAL TO CINACT
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION COLD(NCOL,NROW,NLAY,NCOMP),CNEW(NCOL,NROW,NLAY,NCOMP),
     +	PRSITY(NCOL,NROW,NLAY),DELR(NCOL),DELC(NROW),
     +	DH(NCOL,NROW,NLAY),DCDT(NCOL,NROW,NLAY)
	COMMON /DENSITY/ PF,CONVERSION

      do K=1, nlay
      do I=1, nrow
      do J=1, ncol
	IF(CNEW(J,I,K,1).EQ.CINACT.OR.COLD(J,I,K,1).EQ.CINACT) GOTO 10
	dcdt(j,i,k)=prsity(j,i,k)*CONVERSION*(cnew(j,i,k,1)-
     +                   cold(j,i,k,1))/DTRANS*delr(j)*delc(i)*
     +                   dh(j,i,k)
   10 CONTINUE
      ENDDO
      enddo
      enddo
	END



      SUBROUTINE SWTFM(CR,CC,CV,HNEW,IBOUND,RHOCR,RHOCC,RHOCV,PS,ELEV,
     1	             NCOL,NROW,NLAY,RHS,DCDT,TOP,BOT,IWTABLE)

C-----VERSION  1JUN2001 SWT1FM
C     ******************************************************************
C     CALCULATE BUOYANCY, WATER-TABLE CORRECTION TERMS AND CONDUCTANCE 
C     TERMS BASED ON FLUID DENSITY
C     ******************************************************************
C
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION CC(NCOL,NROW,NLAY),CR(NCOL,NROW,NLAY),
     1    CV(NCOL,NROW,NLAY),HNEW(NCOL,NROW,NLAY),
     2    RHOCC(NCOL,NROW,NLAY),RHOCR(NCOL,NROW,NLAY),
     3    RHOCV(NCOL,NROW,NLAY),PS(NCOL,NROW,NLAY),ELEV(NCOL,NROW,NLAY),
	4    IBOUND(NCOL,NROW,NLAY),RHS(NCOL,NROW,NLAY),
     5    DCDT(NCOL,NROW,NLAY),TOP(NCOL,NROW,NLAY),BOT(NCOL,NROW,NLAY)

	LOGICAL CORRECT

      COMMON /DENSITY/ PF,CONVERSION
	COMMON /FLWCOM/LAYCON(80)

C	FLOWDIR IS ALWAYS POSITIVE INTO THE CURRENT CELL
C	CALCULATE DENSITY DIFFERENCE TERMS AND ADD TO RHS
	KT=0
	KB=0
      DO K=1,NLAY
	IF (LAYCON(K).EQ.3.OR.LAYCON(K).EQ.2) KT=KT+1
	IF (LAYCON(K).EQ.1.OR.LAYCON(K).EQ.3) KB=KB+1
	DO I=1,NROW
	DO J=1,NCOL
		B1=0.
		B2=0.
		B3=0.
		B4=0.
		B5=0.
		B6=0.
		IF(IBOUND(J,I,K).LE.0) GOTO 70
C		CALCULATE BUOYANCY TERM LEFT (J-1,I,K): B1
		IF(J.EQ.1) GOTO 10
		IF(IBOUND(J-1,I,K).EQ.0) GOTO 10
		H1=HNEW(J,I,K)
		H2=HNEW(J-1,I,K)
		Z1=ELEV(J,I,K)
		Z2=ELEV(J-1,I,K)
		PS1=PS(J,I,K)
		PS2=PS(J-1,I,K)
		IF(LAYCON(K).EQ.3) THEN
			TOP1=TOP(J,I,KT)
			TOP2=TOP(J-1,I,KT)
		ENDIF
		IF(LAYCON(K).NE.2.AND.LAYCON(K).NE.0) THEN
			BOT1=BOT(J,I,KB)
			BOT2=BOT(J-1,I,KB)
		ENDIF
		IF (IWTABLE.EQ.1) CALL VDWTABLE(LAYCON(K),
     +                                    H1,PS1,Z1,TOP1,BOT1,
     +                                    H2,PS2,Z2,TOP2,BOT2)
		AVGDENS=0.5*(PS1+PS2)
		B1=CR(J-1,I,K)*(AVGDENS-PF)/PF*(ELEV(J-1,I,K)-ELEV(J,I,K))
		HDIFF=H2-H1
		FLOWDIR=CR(J-1,I,K)*(HDIFF+(AVGDENS-PF)/PF*(Z2-Z1))
		IF (FLOWDIR.GT.0.) THEN
			B1=B1*PS(J-1,I,K)
		ELSE
			B1=B1*PS(J,I,K)
		ENDIF
C		CALCULATE BUOYANCY TERM RIGHT (J+1,I,K): B2
   10		IF(J.EQ.NCOL) GOTO 20
		IF(IBOUND(J+1,I,K).EQ.0) GOTO 20
		H1=HNEW(J,I,K)
		H2=HNEW(J+1,I,K)
		Z1=ELEV(J,I,K)
		Z2=ELEV(J+1,I,K)
		PS1=PS(J,I,K)
		PS2=PS(J+1,I,K)
		IF(LAYCON(K).EQ.3) THEN
			TOP1=TOP(J,I,KT)
			TOP2=TOP(J+1,I,KT)
		ENDIF
		IF(LAYCON(K).NE.2.AND.LAYCON(K).NE.0) THEN
			BOT1=BOT(J,I,KB)
			BOT2=BOT(J+1,I,KB)
		ENDIF
		IF (IWTABLE.EQ.1) CALL VDWTABLE(LAYCON(K),
     +                                    H1,PS1,Z1,TOP1,BOT1,
     +                                    H2,PS2,Z2,TOP2,BOT2)
		AVGDENS=0.5*(PS1+PS2)
		B2=CR(J,I,K)*(AVGDENS-PF)/PF*(ELEV(J+1,I,K)-ELEV(J,I,K))
		HDIFF=H2-H1
		FLOWDIR=CR(J,I,K)*(HDIFF+(AVGDENS-PF)/PF*(Z2-Z1))
		IF (FLOWDIR.GT.0.) THEN
			B2=B2*PS(J+1,I,K)
		ELSE
			B2=B2*PS(J,I,K)
		ENDIF
C		CALCULATE BUOYANCY TERM BACK (J,I-1,K): B3
   20		IF(I.EQ.1) GOTO 30
		IF(IBOUND(J,I-1,K).EQ.0) GOTO 30
		H1=HNEW(J,I,K)
		H2=HNEW(J,I-1,K)
		Z1=ELEV(J,I,K)
		Z2=ELEV(J,I-1,K)
		PS1=PS(J,I,K)
		PS2=PS(J,I-1,K)
		IF(LAYCON(K).EQ.3) THEN
			TOP1=TOP(J,I,KT)
			TOP2=TOP(J,I-1,KT)
		ENDIF
		IF(LAYCON(K).NE.2.AND.LAYCON(K).NE.0) THEN
			BOT1=BOT(J,I,KB)
			BOT2=BOT(J,I-1,KB)
		ENDIF
		IF (IWTABLE.EQ.1) CALL VDWTABLE(LAYCON(K),
     +                                    H1,PS1,Z1,TOP1,BOT1,
     +                                    H2,PS2,Z2,TOP2,BOT2)
		AVGDENS=0.5*(PS1+PS2)
		B3=CC(J,I-1,K)*(AVGDENS-PF)/PF*(ELEV(J,I-1,K)-ELEV(J,I,K))
		HDIFF=H2-H1
		FLOWDIR=CC(J,I-1,K)*(HDIFF+(AVGDENS-PF)/PF*(Z2-Z1))
		IF (FLOWDIR.GT.0.) THEN
			B3=B3*PS(J,I-1,K)
		ELSE
			B3=B3*PS(J,I,K)
		ENDIF
C		CALCULATE BUOYANCY TERM FRONT (J,I+1,K): B4
   30		IF(I.EQ.NROW) GOTO 40
		IF(IBOUND(J,I+1,K).EQ.0) GOTO 40
		H1=HNEW(J,I,K)
		H2=HNEW(J,I+1,K)
		Z1=ELEV(J,I,K)
		Z2=ELEV(J,I+1,K)
		PS1=PS(J,I,K)
		PS2=PS(J,I+1,K)
		IF(LAYCON(K).EQ.3) THEN
			TOP1=TOP(J,I,KT)
			TOP2=TOP(J,I+1,KT)
		ENDIF
		IF(LAYCON(K).NE.2.AND.LAYCON(K).NE.0) THEN
			BOT1=BOT(J,I,KB)
			BOT2=BOT(J,I+1,KB)
		ENDIF
		IF (IWTABLE.EQ.1) CALL VDWTABLE(LAYCON(K),
     +                                    H1,PS1,Z1,TOP1,BOT1,
     +                                    H2,PS2,Z2,TOP2,BOT2)
		AVGDENS=0.5*(PS1+PS2)
		B4=CC(J,I,K)*(AVGDENS-PF)/PF*(ELEV(J,I+1,K)-ELEV(J,I,K))
		HDIFF=H2-H1
		FLOWDIR=CC(J,I,K)*(HDIFF+(AVGDENS-PF)/PF*(Z2-Z1))
		IF (FLOWDIR.GT.0.) THEN
			B4=B4*PS(J,I+1,K)
		ELSE
			B4=B4*PS(J,I,K)
		ENDIF
C		CALCULATE BUOYANCY TERM UP (J,I,K-1): B5
   40		IF(K.EQ.1) GOTO 50
		IF(IBOUND(J,I,K-1).EQ.0) GOTO 50
		AVGDENS=0.5*(PS(J,I,K-1)+PS(J,I,K))
		B5=CV(J,I,K-1)*(AVGDENS-PF)/PF*(ELEV(J,I,K-1)-ELEV(J,I,K))
		HDIFF=HNEW(J,I,K-1)-HNEW(J,I,K)
		FLOWDIR=CV(J,I,K-1)*HDIFF+B5
		IF (FLOWDIR.GT.0.) THEN
			B5=B5*PS(J,I,K-1)
		ELSE
			B5=B5*PS(J,I,K)
		ENDIF
C		CALCULATE BUOYANCY TERM DOWN (J,I,K+1): B6
   50		IF(K.EQ.NLAY) GOTO 60
		IF(IBOUND(J,I,K+1).EQ.0) GOTO 60
		AVGDENS=0.5*(PS(J,I,K+1)+PS(J,I,K))
		B6=CV(J,I,K)*(AVGDENS-PF)/PF*(ELEV(J,I,K+1)-ELEV(J,I,K))
		HDIFF=HNEW(J,I,K+1)-HNEW(J,I,K)
		FLOWDIR=CV(J,I,K)*HDIFF+B6
		IF (FLOWDIR.GT.0.) THEN
			B6=B6*PS(J,I,K+1)
		ELSE
			B6=B6*PS(J,I,K)
		ENDIF
   60		CONTINUE
C		SUBTRACT BUOYANCY TERMS AND ADD DCDT FROM/TO RHS ACCUMULATOR
		RHS(J,I,K)=RHS(J,I,K)-B1-B2-B3-B4-B5-B6+DCDT(J,I,K)
   70     CONTINUE
	ENDDO
	ENDDO
	ENDDO


C	CALCULATE RHOCR BASED ON UPSTREAM WEIGHTED DENSITY
	KT=0
	KB=0
	DO K=1,NLAY
	IF (LAYCON(K).EQ.3.OR.LAYCON(K).EQ.2) KT=KT+1
	IF (LAYCON(K).EQ.1.OR.LAYCON(K).EQ.3) KB=KB+1
	DO I=1,NROW
	DO J=1,NCOL-1
		IF(IBOUND(J,I,K).EQ.0) GOTO 74
		RHOCR(J,I,K)=CR(J,I,K)*PS(J,I,K)
   		IF(IBOUND(J,I,K).NE.0.AND.IBOUND(J+1,I,K).NE.0) THEN
			H1=HNEW(J,I,K)
			H2=HNEW(J+1,I,K)
			Z1=ELEV(J,I,K)
			Z2=ELEV(J+1,I,K)
			PS1=PS(J,I,K)
			PS2=PS(J+1,I,K)
			IF(LAYCON(K).EQ.3) THEN
				TOP1=TOP(J,I,KT)
				TOP2=TOP(J+1,I,KT)
			ENDIF
			IF(LAYCON(K).NE.2.AND.LAYCON(K).NE.0) THEN
				BOT1=BOT(J,I,KB)
				BOT2=BOT(J+1,I,KB)
			ENDIF
			IF (IWTABLE.EQ.1) CALL VDWTABLE(LAYCON(K),
     +                                    H1,PS1,Z1,TOP1,BOT1,
     +                                    H2,PS2,Z2,TOP2,BOT2)
			AVGDENS=0.5*(PS1+PS2)
			B2=CR(J,I,K)*(AVGDENS-PF)/PF*(Z2-Z1)
			HDIFF=H2-H1
			FLOWDIR=CR(J,I,K)*HDIFF+B2
			IF (FLOWDIR.GT.0.) THEN
				RHOCR(J,I,K)=CR(J,I,K)*PS(J+1,I,K)
			ELSE
				RHOCR(J,I,K)=CR(J,I,K)*PS(J,I,K)
			ENDIF
		ENDIF
   74     CONTINUE
	ENDDO
	ENDDO
	ENDDO
C	CALCULATE RHOCC BASED ON UPSTREAM WEIGHTED DENSITY
	KT=0
	KB=0
	DO K=1,NLAY
	IF (LAYCON(K).EQ.3.OR.LAYCON(K).EQ.2) KT=KT+1
	IF (LAYCON(K).EQ.1.OR.LAYCON(K).EQ.3) KB=KB+1
	DO I=1,NROW-1
	DO J=1,NCOL
		IF(IBOUND(J,I,K).EQ.0) GOTO 75
		RHOCC(J,I,K)=CC(J,I,K)*PS(J,I,K)
   		IF(IBOUND(J,I,K).NE.0.AND.IBOUND(J,I+1,K).NE.0) THEN
			H1=HNEW(J,I,K)
			H2=HNEW(J,I+1,K)
			Z1=ELEV(J,I,K)
			Z2=ELEV(J,I+1,K)
			PS1=PS(J,I,K)
			PS2=PS(J,I+1,K)
			IF(LAYCON(K).EQ.3) THEN
				TOP1=TOP(J,I,KT)
				TOP2=TOP(J,I+1,KT)
			ENDIF
			IF(LAYCON(K).NE.2.AND.LAYCON(K).NE.0) THEN
				BOT1=BOT(J,I,KB)
				BOT2=BOT(J,I+1,KB)
			ENDIF
			IF (IWTABLE.EQ.1) CALL VDWTABLE(LAYCON(K),
     +                                    H1,PS1,Z1,TOP1,BOT1,
     +                                    H2,PS2,Z2,TOP2,BOT2)
			AVGDENS=0.5*(PS1+PS2)
			B4=CC(J,I,K)*(AVGDENS-PF)/PF*(Z2-Z1)
			HDIFF=H2-H1
			FLOWDIR=CC(J,I,K)*HDIFF+B4
			IF (FLOWDIR.GT.0.) THEN
				RHOCC(J,I,K)=CC(J,I,K)*PS(J,I+1,K)
			ELSE
				RHOCC(J,I,K)=CC(J,I,K)*PS(J,I,K)
			ENDIF
		ENDIF
   75     CONTINUE
	ENDDO
	ENDDO
	ENDDO
C	CALCULATE RHOCV BASED ON UPSTREAM WEIGHTED DENSITY
	DO K=1,NLAY-1
	DO I=1,NROW
	DO J=1,NCOL
		IF (IBOUND(J,I,K).EQ.0) GOTO 76
		RHOCV(J,I,K)=CV(J,I,K)*PS(J,I,K)
		IF(IBOUND(J,I,K).NE.0.AND.IBOUND(J,I,K+1).NE.0) THEN
			AVGDENS=0.5*(PS(J,I,K+1)+PS(J,I,K))
			B6=CV(J,I,K)*(AVGDENS-PF)/PF*(ELEV(J,I,K+1)-ELEV(J,I,K))
			HDIFF=HNEW(J,I,K+1)-HNEW(J,I,K)
			FLOWDIR=CV(J,I,K)*HDIFF+B6
			IF (FLOWDIR.GT.0.) THEN
				RHOCV(J,I,K)=CV(J,I,K)*PS(J,I,K+1)
			ELSE
				RHOCV(J,I,K)=CV(J,I,K)*PS(J,I,K)
			ENDIF
		ENDIF
   76     CONTINUE
	ENDDO
	ENDDO
	ENDDO


C	MAKE CORRECTIONS FOR WATER-TABLE CASE
	IF (IWTABLE.EQ.0) GOTO 110
	KT=0
	KB=0
	DO K=1,NLAY
	IF (LAYCON(K).EQ.3.OR.LAYCON(K).EQ.2) KT=KT+1
	IF (LAYCON(K).EQ.1.OR.LAYCON(K).EQ.3) KB=KB+1
	IF (LAYCON(K).EQ.0.OR.LAYCON(K).EQ.2) GOTO 100
	DO I=1,NROW
	DO J=1,NCOL
		C1=0.
		C2=0.
		C3=0.
		C4=0.
		B1=0.
		B2=0.
		B3=0.
		B4=0.
		IF (IBOUND(J,I,K).LE.0) GOTO 90
		ZWT2I=(SALTHEAD(HNEW(J,I,K),PS(J,I,K),ELEV(J,I,K))
     +           +BOT(J,I,KB))/2

C	CORRECT FOR FLOW TO LEFT
		IF(J.EQ.1) GOTO 85
		IF(IBOUND(J-1,I,K).EQ.0) GOTO 85
		CORRECT=.FALSE.
		IF(LAYCON(K).EQ.3.) THEN
			IF(SALTHEAD(HNEW(J,I,K),PS(J,I,K),ELEV(J,I,K)).LT.
     +           TOP(J,I,KT)) CORRECT=.TRUE.
			IF(SALTHEAD(HNEW(J-1,I,K),PS(J-1,I,K),ELEV(J-1,I,K)).LT.
     +           TOP(J-1,I,KT)) CORRECT=.TRUE.
		ENDIF
		IF(LAYCON(K).EQ.1) CORRECT=.TRUE.
		IF(.NOT.CORRECT) GOTO 85
		AVGDENS=0.5*(PS(J-1,I,K)+PS(J,I,K))
		B1=CR(J-1,I,K)*(AVGDENS-PF)/PF*(ELEV(J-1,I,K)-ELEV(J,I,K))
		HDIFF=HNEW(J-1,I,K)-HNEW(J,I,K)
		ZWT2NEXT=(SALTHEAD(HNEW(J-1,I,K),PS(J-1,I,K),ELEV(J-1,I,K))
     +           +BOT(J-1,I,KB))/2
		C1=CR(J-1,I,K)*((AVGDENS-PF)/PF*(ELEV(J-1,I,K)-ELEV(J,I,K)+
     +       ZWT2I-ZWT2NEXT)+(PS(J-1,I,K)-PF)/PF*(ZWT2NEXT-
     +       ELEV(J-1,I,K))+(PS(J,I,K)-PF)/PF*(ELEV(J,I,K)-ZWT2I))
		FLOWDIR=(CR(J-1,I,K)*HDIFF+B1)-C1
		IF (FLOWDIR.GT.0.) THEN
			C1=C1*PS(J-1,I,K)
		ELSE
			C1=C1*PS(J,I,K)
		ENDIF
   85     CONTINUE

C	CORRECT FOR FLOW TO RIGHT
		IF(J.EQ.NCOL) GOTO 86
		IF(IBOUND(J+1,I,K).EQ.0) GOTO 86
		CORRECT=.FALSE.
		IF(LAYCON(K).EQ.3.) THEN
			IF(SALTHEAD(HNEW(J,I,K),PS(J,I,K),ELEV(J,I,K)).LT.
     +           TOP(J,I,KT)) CORRECT=.TRUE.
			IF(SALTHEAD(HNEW(J+1,I,K),PS(J+1,I,K),ELEV(J+1,I,K)).LT.
     +           TOP(J+1,I,KT)) CORRECT=.TRUE.
		ENDIF
		IF(LAYCON(K).EQ.1) CORRECT=.TRUE.
		IF(.NOT.CORRECT) GOTO 86
		AVGDENS=0.5*(PS(J+1,I,K)+PS(J,I,K))
		B2=CR(J,I,K)*(AVGDENS-PF)/PF*(ELEV(J+1,I,K)-ELEV(J,I,K))
		HDIFF=HNEW(J+1,I,K)-HNEW(J,I,K)
		ZWT2NEXT=(SALTHEAD(HNEW(J+1,I,K),PS(J+1,I,K),ELEV(J+1,I,K))
     +           +BOT(J+1,I,KB))/2
		C2=CR(J,I,K)*((AVGDENS-PF)/PF*(ELEV(J+1,I,K)-ELEV(J,I,K)+
     +       ZWT2I-ZWT2NEXT)+(PS(J+1,I,K)-PF)/PF*(ZWT2NEXT-
     +       ELEV(J+1,I,K))+(PS(J,I,K)-PF)/PF*(ELEV(J,I,K)-ZWT2I))
		FLOWDIR=(CR(J,I,K)*HDIFF+B2)-C2
		IF (FLOWDIR.GT.0.) THEN
			C2=C2*PS(J+1,I,K)
		ELSE
			C2=C2*PS(J,I,K)
		ENDIF
   86     CONTINUE

C	CORRECT FOR FLOW TO BACK
     		IF(I.EQ.1) GOTO 87
		IF(IBOUND(J,I-1,K).EQ.0) GOTO 87
		CORRECT=.FALSE.
		IF(LAYCON(K).EQ.3.) THEN
     			IF(SALTHEAD(HNEW(J,I,K),PS(J,I,K),ELEV(J,I,K)).LT.
     +           TOP(J,I,KT)) CORRECT=.TRUE.
			IF(SALTHEAD(HNEW(J,I-1,K),PS(J,I-1,K),ELEV(J,I-1,K)).LT.
     +           TOP(J,I-1,KT)) CORRECT=.TRUE.
		ENDIF
		IF(LAYCON(K).EQ.1) CORRECT=.TRUE.
		IF(.NOT.CORRECT) GOTO 87
		AVGDENS=0.5*(PS(J,I-1,K)+PS(J,I,K))
		B3=CC(J,I-1,K)*(AVGDENS-PF)/PF*(ELEV(J,I-1,K)-ELEV(J,I,K))
		HDIFF=HNEW(J,I-1,K)-HNEW(J,I,K)
		ZWT2NEXT=(SALTHEAD(HNEW(J,I-1,K),PS(J,I-1,K),ELEV(J,I-1,K))
     +           +BOT(J,I-1,KB))/2
		C3=CC(J,I-1,K)*((AVGDENS-PF)/PF*(ELEV(J,I-1,K)-ELEV(J,I,K)+
     +       ZWT2I-ZWT2NEXT)+(PS(J,I-1,K)-PF)/PF*(ZWT2NEXT-
     +       ELEV(J,I-1,K))+(PS(J,I,K)-PF)/PF*(ELEV(J,I,K)-ZWT2I))
		FLOWDIR=(CC(J,I-1,K)*HDIFF+B3)-C3
		IF (FLOWDIR.GT.0.) THEN
			C3=C3*PS(J,I-1,K)
		ELSE
			C3=C3*PS(J,I,K)
		ENDIF
   87		CONTINUE

C	CORRECT FOR FLOW TO FRONT
   		IF(I.EQ.NROW) GOTO 90
		IF(IBOUND(J,I+1,K).EQ.0) GOTO 90
		CORRECT=.FALSE.
		IF(LAYCON(K).EQ.3.) THEN
			IF(SALTHEAD(HNEW(J,I,K),PS(J,I,K),ELEV(J,I,K)).LT.
     +           TOP(J,I,KT)) CORRECT=.TRUE.
			IF(SALTHEAD(HNEW(J,I+1,K),PS(J,I+1,K),ELEV(J,I+1,K)).LT.
     +           TOP(J,I+1,KT)) CORRECT=.TRUE.
		ENDIF
		IF(LAYCON(K).EQ.1) CORRECT=.TRUE.
		IF(.NOT.CORRECT) GOTO 90
		AVGDENS=0.5*(PS(J,I+1,K)+PS(J,I,K))
		B4=CC(J,I,K)*(AVGDENS-PF)/PF*(ELEV(J,I+1,K)-ELEV(J,I,K))
		HDIFF=HNEW(J,I+1,K)-HNEW(J,I,K)
		ZWT2NEXT=(SALTHEAD(HNEW(J,I+1,K),PS(J,I+1,K),ELEV(J,I+1,K))
     +           +BOT(J,I+1,KB))/2
		C4=CC(J,I,K)*((AVGDENS-PF)/PF*(ELEV(J,I+1,K)-ELEV(J,I,K)+
     +       ZWT2I-ZWT2NEXT)+(PS(J,I+1,K)-PF)/PF*(ZWT2NEXT-
     +       ELEV(J,I+1,K))+(PS(J,I,K)-PF)/PF*(ELEV(J,I,K)-ZWT2I))
		FLOWDIR=(CC(J,I,K)*HDIFF+B4)-C4
		IF (FLOWDIR.GT.0.) THEN
			C4=C4*PS(J,I+1,K)
		ELSE
			C4=C4*PS(J,I,K)
		ENDIF
   90		CONTINUE

		RHS(J,I,K)=RHS(J,I,K)+C1+C2+C3+C4

	ENDDO
	ENDDO
  100 CONTINUE
	ENDDO	
  110 CONTINUE
	END


        SUBROUTINE SWTBD(VBNM,VBVL,MSUM,IBOUND,DELT,NCOL,NROW,NLAY,ntr,
     +  KSTP,
     +  KPER,IBCFCB,ICBCFL,BUFF,IOUT,PS,DCDT,PRTOUT,STEPEND)
C-----VERSION  9OCT1999 SWTBD
C     ******************************************************************
C     SUM THE DCDT TERMS FOR BUDGET
C     ******************************************************************
C
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	CHARACTER*4 VBNM,TEXT(4)
	DIMENSION IBOUND(NCOL,NROW,NLAY),VBNM(4,20),VBVL(4,20),
     +	BUFF(NCOL,NROW,NLAY),PS(NCOL,NROW,NLAY),DCDT(NCOL,NROW,NLAY)	
        LOGICAL PRTOUT,STEPEND
      DATA TEXT(1),TEXT(2),TEXT(3),TEXT(4) /'    ','    ','    ','DCDT'/

C1--INITIALIZE BUDGET ACCUMULATORS
	DCDTIN=0.
	DCDTOUT=0.

C2--IF CELL-BY-CELL FLOWS ARE NEEDED THEN SET FLAG IBD
	IBD=0
      IF(STEPEND.AND.ICBCFL.NE.0.AND.IBCFCB.GT.0) IBD=1

C3--IF CELL-BY-CELL FLOWS ARE NEEDED (IBD IS SET) CLEAR BUFFER
	DO 210 K=1,NLAY
	DO 210 I=1,NROW
	DO 210 J=1,NCOL
	BUFF(J,I,K)=0.
  210 CONTINUE

C4--RUN THROUGH EVERY CELL IN GRID
	do 400 K=1,NLAY
	do 400 I=1,NROW
	do 400 J=1,NCOL
		IF (IBOUND(J,I,K).EQ.0) GOTO 400
c		switch sign of dcdt for mass balance calculation
		DCDTVOL=-1*DCDT(J,I,K)
		IF(IBD.EQ.1) BUFF(J,I,K)=DCDTVOL/PS(J,I,K)
		IF(DCDTVOL) 392,400,394
  392     DCDTOUT=DCDTOUT-DCDTVOL
          GOTO 400
  394     DCDTIN=DCDTIN+DCDTVOL
  400 CONTINUE 		

C5--IF IBD FLAG IS SET RECORD THE CONTENTS OF THE BUFFER
	IF (IBD.EQ.1) CALL UBUDSV(KSTP,KPER,TEXT,IBCFCB,BUFF,NCOL,NROW,
     +	NLAY,IOUT)	

C6--ADD TOTAL RATES AND VOLUMES TO VBVL AND PUT TITLES IN VBNM
      VBVL(1,MSUM)=VBVL(1,MSUM)+DCDTIN*DELT
      VBVL(2,MSUM)=VBVL(2,MSUM)+DCDTOUT*DELT
      VBVL(3,MSUM)=DCDTIN
      VBVL(4,MSUM)=DCDTOUT
      VBNM(1,MSUM)=TEXT(1)
      VBNM(2,MSUM)=TEXT(2)
      VBNM(3,MSUM)=TEXT(3)
      VBNM(4,MSUM)=TEXT(4)
      MSUM=MSUM+1

C7--RETURN
	RETURN
	END	



	FUNCTION SSMDENSE(I,J,K,NTYPE,MXSS,NSS,SS)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION SS(6,MXSS)
	COMMON /DENSITY/ PF,CONVERSION
	SSMDENSE=PF
	IF (NSS.LE.0) RETURN
	DO 10 NS=1,NSS
		ITYPE=SS(6,NS)
		KK=SS(1,NS)
		II=SS(2,NS)
		JJ=SS(3,NS)
		IF(ITYPE.EQ.NTYPE.AND.
     +       KK.EQ.K.AND.
     +	   II.EQ.I.AND.
     +       JJ.EQ.J) THEN
                        SSMDENSE=CALCDENS(SS(4,NS))
			GOTO 20
		ENDIF
   10 CONTINUE
   20 CONTINUE
	END


	FUNCTION SALTHEAD(HF,DENSE,ELEV)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	COMMON /DENSITY/ PF,CONVERSION
          SALTHEAD=HF*PF/DENSE+(DENSE-PF)/DENSE*ELEV
	END


	SUBROUTINE SWTCOUPL(NCOL,NROW,NLAY,M,PSOLD,PS,DONE,DNSCRIT)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION PSOLD(NCOL,NROW,NLAY),PS(NCOL,NROW,NLAY)
	LOGICAL DONE
	
	DO I=1,NROW
	DO J=1,NCOL
	DO K=1,NLAY
		DIFF=PS(J,I,K)-PSOLD(J,I,K)
		IF (ABS(DIFF).GT.DNSCRIT) THEN
			DONE=.FALSE.
		ENDIF
	ENDDO
	ENDDO
	ENDDO
	END

	SUBROUTINE VDWTABLE(LC,H1,PS1,Z1,TOP1,BOT1,H2,PS2,Z2,TOP2,BOT2)
C	THIS SUBROUTINE CALCULATES NEW VALUES FOR Z1 AND H1
C	Z1 IS THE ELEVATION HALFWAY BETWEEN THE WATER TABLE AND THE CELL BOTTOM
C	H1 IS THE EQUIVALENT FRESHWATER HEAD AT Z1
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	LOGICAL CORRECT
	COMMON /DENSITY/ PF,CONVERSION
	CORRECT=.FALSE.
	IF (LC.EQ.3) THEN
		IF (SALTHEAD(H1,PS1,Z1).LT.TOP1) CORRECT=.TRUE.
	ENDIF
	IF (LC.EQ.1) CORRECT=.TRUE.
	IF (CORRECT) THEN
		TEMP=(SALTHEAD(H1,PS1,Z1)+BOT1)/2
		H1=H1+(PS1-PF)/PF*(Z1-TEMP)
		Z1=TEMP
	ENDIF
	CORRECT=.FALSE.
	IF (LC.EQ.3) THEN
		IF (SALTHEAD(H2,PS2,Z2).LT.TOP2) CORRECT=.TRUE.
	ENDIF
	IF (LC.EQ.1) CORRECT=.TRUE.
	IF (CORRECT) THEN
		TEMP=(SALTHEAD(H2,PS2,Z2)+BOT2)/2
		H2=H2+(PS2-PF)/PF*(Z2-TEMP)
		Z2=TEMP
	ENDIF
	END